#!/usr/bin/env bash

# Django Collectstatic runner. If you have Django installed, collectstatic will
# automatically be executed as part of the build process. If collectstatic
# fails, your build fails.

# This functionality will only activate if Django is in requirements.txt.

# Runtime arguments:
#   - $DISABLE_COLLECTSTATIC: disables this functionality.
#   - $DEBUG_COLLECTSTATIC: upon failure, print out environment variables.

source $BIN_DIR/utils

DIR="$BUILD_DIR/.heroku/gettext"
rm -rf $DIR/*
mkdir -p $DIR

GETTEXT_TARBALL=http://fb_wanted.s3.amazonaws.com/bp/gettext.tar.gz

echo "-----> Installing gettext..."
curl --silent --max-time 60 --location "$GETTEXT_TARBALL" | tar xz -C "$BUILD_DIR/.heroku"

export PATH=$DIR/bin:$PATH

echo "-----> done in $DIR/.heroku/gettext"

# Location of 'manage.py', if it exists.
MANAGE_FILE=$(find . -maxdepth 3 -type f -name 'manage.py' -printf '%d\t%P\n' | sort -nk1 | cut -f2 | head -1)
MANAGE_FILE=${MANAGE_FILE:-fakepath}

# Ensure that Django is explicitly specified in requirements.txt
pip-grep -s requirements.txt django Django && DJANGO_INSTALLED=1

if [ -f "$MANAGE_FILE" ] && [ "$DJANGO_INSTALLED" ]; then
    set +e

    puts-cmd "python $MANAGE_FILE compilemessages -v0"

    # Run collectstatic, cleanup some of the noisy output.
    python $MANAGE_FILE compilemessages -v0 --traceback 2>&1

    echo
fi

rm -rf $DIR

